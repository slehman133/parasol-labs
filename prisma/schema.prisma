generator client {
  provider = "prisma-client-js"
}

datasource db {
  // for local dev
  // provider = "postgresql"
  // url      = env("DATABASE_URL")

  // for prod
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  email     String    @unique
  password  String
  role      user_type @default(user)
  cart      String    @default("[]")
  Orders    Order[]

  sentMessages Message[]
  ContactForm  ContactForm[]
}

model Order {
  id           Int      @id @default(autoincrement())
  userId       Int?
  itemName     String
  itemQuantity Int
  orderedAt    DateTime
  User         User?    @relation(fields: [userId], references: [id])
}

enum user_type {
  admin
  user
}

//Logistically, you could refactor and create a model for:
// - Company
// - CompanyAddress
// - PersonOfContact
// - PartnershipForm
// However, with the current schema, there isn't much to gain from the refactor as there is not much data to query.
model PartnershipForm {
  id              Int      @id @default(autoincrement())
  companyName     String   @db.VarChar(255)
  companyWebpage  String?  @db.VarChar(255)
  streetAddress   String   @db.VarChar(255)
  streetAddress2  String?  @db.VarChar(255)
  city            String   @db.VarChar(255)
  stateOrProvince String   @db.VarChar(255)
  postalCode      String   @db.VarChar(255)
  services        String[]
  additionalInfo  String?  @db.Text
  contactName     String   @db.VarChar(255)
  phoneNumber     String   @db.VarChar(255)
  emailAddress    String   @db.VarChar(255)
  status          String
  createdAt       DateTime @default(now())
}

model ContactForm {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(255)
  email   String @db.VarChar(255)
  message String @db.Text
  status  String

  user      User?     @relation(fields: [userId], references: [id])
  userId    Int?
  messages  Message[]
  createdAt DateTime  @default(now())
}

model Message {
  id            Int         @id @default(autoincrement())
  content       String      @db.Text
  sender        User        @relation(fields: [senderId], references: [id])
  senderId      Int
  contactForm   ContactForm @relation(fields: [contactFormId], references: [id])
  contactFormId Int
}
